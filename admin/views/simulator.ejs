<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="/lib/jquery-3.3.1.min.js"></script>
    <script src="/lib/three.js/three.js"></script>
    <script src="/lib/three.js/OrbitControls.js"></script>
    <script src="/lib/wsSocket/wsClient.js"></script>
    <link rel="stylesheet" href="/stylesheets/simulator.css">
</head>

<body>
    <h3 class="head_title">模拟农业大棚</h3>

    <!-- 外层模型容器 -->
    <div id="outer-arch"></div>

    <!-- 内层具体实现容器 -->
    <div id="inner-arch">
        <button onclick="returnArchOut();event.stopPropagation()">返回</button>
        <!-- <button onclick="temperatureUping()">升温</button>
        <button onclick="temperatureDowning()">通风降温</button>
        <button onclick="watering()">浇水</button>
        <button onclick="fertilizing()">施肥</button>
        <button onclick="light()">开灯</button> -->
        <br/>
        <br/>
    </div>

    <!-- 大棚外围 -->
    <script>
        // 通过ajax获取数据库中存储有多少个大棚
        var archHouse = []
        $.ajax({
            url: '/arch/getArch',
            type: 'get',
            async: false, // 同步获取，防止后面没有数据
            success(res) {
                archHouse = res.archHouse
                // console.log(archHouse)
            },
            fail(err) {
                console.log(err)
            }
        })

        var sceneOut = new THREE.Scene();
        sceneOut.rotateX(Math.PI / 11)
        sceneOut.rotateZ(-Math.PI / 11)
        /*  var axisHelperOut = new THREE.AxesHelper(250);
         sceneOut.add(axisHelperOut); */
        /**
            * 创建一个草地地面
        */
        var geometryGrassOut = new THREE.PlaneGeometry(500, 500); //矩形平面
        // 加载草地纹理贴图
        var textureGrassOut = new THREE.TextureLoader().load("/images/Earth.jpg");
        // 设置纹理的重复模式
        textureGrassOut.wrapS = THREE.RepeatWrapping;
        textureGrassOut.wrapT = THREE.RepeatWrapping;
        // uv两个方向纹理重复数量
        textureGrassOut.repeat.set(10, 10);
        var materialGrassOut = new THREE.MeshLambertMaterial({
            color: 0x777700,
            // map:texture,
        });
        var meshGrassOut = new THREE.Mesh(geometryGrassOut, materialGrassOut); //网格模对象Mesh
        sceneOut.add(meshGrassOut); //网格模型添加到场景中
        meshGrassOut.rotateX(-Math.PI / 2);

        /* 
            *添加大棚模型
        */
        // 通过点定义旋转一条旋转的线
        var pointsArchOut = [
            new THREE.Vector2(0, 50),
            new THREE.Vector2(50, 50),
            new THREE.Vector2(50, -50),
            new THREE.Vector2(0, -50)
        ];
        var geometryArchOut = new THREE.LatheGeometry(pointsArchOut, 30, 0, Math.PI);
        var materialArchOut = new THREE.MeshPhongMaterial({
            color: 0xffffff,//颜色
            side: THREE.DoubleSide,//两面可见 
            transparent: true,
            opacity: 0.2,
            depthTest: false,
        });//材质对象
        // 定义大棚的坐标位置
        var archPosition = new Array();
        var step = 120;
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 4; j++) {
                archPosition[(i * 4) + j] = { x: -180 + j * step, y: 0, z: -180 + i * step }
            }
        }
        // 通过遍历archHouse来创建大棚的数量
        for (let index = 0; index < archHouse.length; index++) {
            var meshArchOut = new THREE.Mesh(geometryArchOut, materialArchOut);//旋转网格模型对象
            // meshArchOut.translateZ(-180)
            // meshArchOut.translateX(-180)
            meshArchOut.position.z = archPosition[index].z
            meshArchOut.position.x = archPosition[index].x
            meshArchOut.rotateZ(Math.PI / 2)
            meshArchOut.rotateX(Math.PI / 2)
            meshArchOut.name = archHouse[index].houseId
            meshArchOut.userData = archHouse[index]
            sceneOut.add(meshArchOut);//旋转网格模型添加到场景中

            var textLoader = new THREE.FontLoader();
            textLoader.load('/font/FangSong_GB2312_Regular.json', function (font) {
                var geometry = new THREE.TextGeometry(archHouse[index].houseId + '号大棚--' + archHouse[index].crops, {
                    font: font,
                    size: 10,
                    height: 1,
                    curveSegments: 1,
                    bevelEnabled: false,
                    bevelThickness: 10,
                    bevelSize: 2,
                    bevelSegments: 5
                });
                var material = new THREE.MeshPhongMaterial({ color: 0xffffff, flatShading: true })// front
                var textMesh = new THREE.Mesh(geometry, material)
                textMesh.position.z = archPosition[index].z
                textMesh.position.x = archPosition[index].x - 45
                // textMesh.rotateZ(-Math.PI / 2)
                // textMesh.rotateX(-Math.PI / 2)
                sceneOut.add(textMesh)
            });
        }

        /* 
            *环境光创建:环境光颜色RGB成分分别和物体材质颜色RGB成分分别相乘 
        */
        var ambientOut = new THREE.AmbientLight(0xffffff);
        sceneOut.add(ambientOut);//环境光对象添加到scene场景中

        /**
            * 相机设置
        */
        var width = window.innerWidth; //窗口宽度
        var height = window.innerHeight; //窗口高度
        /**透视投影相机对象*/
        var cameraOut = new THREE.PerspectiveCamera(60, width / height, 1, 1000);
        cameraOut.position.set(292, 109, 268);//设置相机位置
        cameraOut.lookAt(sceneOut.position); //设置相机方向(指向的场景对象)
        /**
             * 创建渲染器对象
        */
        var rendererOut = new THREE.WebGLRenderer();
        rendererOut.setSize(width, height);//设置渲染区域尺寸
        rendererOut.setClearColor(0xb9d3ff, 1); //设置背景颜色
        window.outerArch = document.getElementById('outer-arch')
        window.innerArch = document.getElementById('inner-arch')
        outerArch.appendChild(rendererOut.domElement); //body元素中插入canvas对象


        function renderOut() {
            rendererOut.render(sceneOut, cameraOut);
            requestAnimationFrame(renderOut)
        }
        renderOut()

        var controlOut = new THREE.OrbitControls(cameraOut, rendererOut.domElement);//创建控件对象

        // 添加大棚点击事件
        var objects = [];
        var raycaster = new THREE.Raycaster();
        var mouse = new THREE.Vector2();
        //监听全局点击事件,通过ray检测选中哪一个object
        window.outerArch.addEventListener("mousedown", (event) => {
            event.preventDefault();

            window.currenType = '';
            window.currenHouseId = '';
            this.mouse.x = (event.clientX / this.rendererOut.domElement.clientWidth) * 2 - 1;
            this.mouse.y = - (event.clientY / this.rendererOut.domElement.clientHeight) * 2 + 1;


            this.raycaster.setFromCamera(this.mouse, this.cameraOut);
            this.sceneOut.children.forEach(child => {
                if (child instanceof THREE.Mesh && child.name) {//根据需求判断哪些加入objects,也可以在生成object的时候push进objects
                    this.objects.push(child)
                }
            })
            var intersects = this.raycaster.intersectObjects(this.objects);

            if (intersects.length > 0) {
                // console.log(intersects[0].object)
                // 修改当前作物名称
                change(intersects[0].object.userData.crops, intersects[0].object.name)
            }
             console.log(window.currenType)
             console.log(window.currenHouseId)
        }, false)

        // 定义作物类型
        window.cropType = {
            '白菜': '/images/baicai.png',
            '萝卜': '/images/luobo.png'
        }
        window.currenType = ''
        window.currenHouseId = ''
        function change(type,id) {
            // 修改当前作物
            window.currenType = window.cropType[type];
            window.currenHouseId = id
            // 隐藏当前外围大棚
            window.outerArch.style.display = 'none'
            // 显示当前点击的大棚的具体实现
            window.innerArch.style.display = 'block'
            init()
        }
    </script>


    <!-- 具体的某个大棚实现 -->
    <!-- 具体的某个大棚实现 -->
    <script>

        var spriteCrop = null;
        var groupCrop = null
        
        /* 初始化农作物函数 */
        function init() {
            /**
                 * 精灵创建种植作物
              */
            // 加载树纹理贴图
            groupCrop = new THREE.Group()
            var textureTree = new THREE.TextureLoader().load(window.currenType);
            // 批量创建表示一个树的精灵模型
            for (let i = 0; i < 100; i++) {
                var spriteMaterial = new THREE.SpriteMaterial({
                    map: textureTree,//设置精灵纹理贴图
                });
                // 创建精灵模型对象
                spriteCrop = new THREE.Sprite(spriteMaterial);
                groupCrop.add(spriteCrop);
                // 控制精灵大小,
                spriteCrop.scale.set(25, 25, 1); //// 只需要设置x、y两个分量就可以
                // 设置精灵模型位置，在xoz平面上随机分布
                spriteCrop.position.set(position[i].x, position[i].y, position[i].z)
            }
            scene.add(groupCrop)
            groupCrop.cropType = window.currenType
            groupCrop.currenHouseId = window.currenHouseId
            // setTimeout(() => {
            //     console.log(groupCrop.cropType)
            //     console.log(groupCrop.currenHouseId)
            // }, 10000);

        }

        // 定义控制状态
        var temperatureUp = false,
            temperatureDown = false,
            water = false,
            fertilize = false,
            lightOn = false;
        /* 
            *添加场景
        */
        var scene = new THREE.Scene();

        // 在场景中，添加所有大棚的控制状态
        scene.HouseCtrl = {}
        for (let index = 0; index < archHouse.length; index++) {
            let houseId = archHouse[index].houseId
            scene.HouseCtrl[houseId] = {
                temperatureUp:false,
                temperatureDown:false,
                water:false,
                fertilize:false,
                lightOn:false
            }
        }
        
        /* 
            *坐标轴
        */
       /*  var axisHelper = new THREE.AxesHelper(250);
        scene.add(axisHelper); */

        /* 
            *四周围的墙
         */
        // 通过点定义旋转一条旋转的线
        var points = [
            new THREE.Vector2(0, 250),
            new THREE.Vector2(250, 250),
            new THREE.Vector2(250, -250),
            new THREE.Vector2(0, -250)
        ];
        var geometrytest = new THREE.LatheGeometry(points, 30, 0, Math.PI);
        var materialtest = new THREE.MeshPhongMaterial({
            color: 0xffffff,//三角面颜色
            side: THREE.DoubleSide,//两面可见 
            transparent: true,
            opacity: 0.2,
            depthTest: false,
        });//材质对象
        var meshtest = new THREE.Mesh(geometrytest, materialtest);//旋转网格模型对象
        meshtest.rotateZ(Math.PI / 2)
        meshtest.position.y = 30
        scene.add(meshtest);//旋转网格模型添加到场景中
        /* 
            *生成作物指定坐标 
        */
        var position = new Array();
        var step = 50;
        for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
                position[(i * 10) + j] = { x: -275 + (i + 1) * step, y: 50, z: -275 + (j + 1) * step }
            }
        }


        /**
             * 创建一个草地地面
        */
        var geometry = new THREE.PlaneGeometry(500, 500); //矩形平面
        // 加载草地纹理贴图
        var texture = new THREE.TextureLoader().load("/images/Earth.jpg");
        // 设置纹理的重复模式
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        // uv两个方向纹理重复数量
        texture.repeat.set(10, 10);
        var material1 = new THREE.MeshLambertMaterial({
            color: 0x777700,
            // map:texture,
        });
        var mesh1 = new THREE.Mesh(geometry, material1); //网格模对象Mesh
        scene.add(mesh1); //网格模型添加到场景中
        mesh1.rotateX(-Math.PI / 2);
        mesh1.position.y = 35

        /**
           * 精灵创建灯泡
        */
        // 加载灯泡两种妆台的贴图
        var textureDengpao = new THREE.TextureLoader().load("/images/dengpao.png");
        var textureDengpaoOn = new THREE.TextureLoader().load("/images/dengpao-on.png");
        // 创建两个组
        var groupDp = new THREE.Group();
        var groupDpOn = new THREE.Group();
        // 批量创建表示一个树的精灵模型
        for (let i = 0; i < 10; i++) {
            var spriteMaterialDengpao = new THREE.SpriteMaterial({
                map: textureDengpao,//设置灯泡灭纹理
            });
            var spriteMaterialDengpaoOn = new THREE.SpriteMaterial({
                map: textureDengpaoOn,//设置灯泡亮纹理
            });
            // 创建精灵模型对象
            var spriteDengpao = new THREE.Sprite(spriteMaterialDengpao);
            var spriteDengpaoOn = new THREE.Sprite(spriteMaterialDengpaoOn);
            // 向两个分组中添加精灵
            groupDp.add(spriteDengpao);
            groupDpOn.add(spriteDengpaoOn);
            // 控制精灵大小,和位置
            spriteDengpao.scale.set(25, 25, 1);
            spriteDengpao.position.set(-275 + (i + 1) * 50, 270, 0)

            // 灯开的状态一开始为0
            spriteDengpaoOn.scale.set(0, 0, 1);
            spriteDengpaoOn.position.set(-275 + (i + 1) * 50, 270, 0)
        }
        // 在场景中添加分组
        scene.add(groupDp)
        scene.add(groupDpOn)
        // 创建一条连接灯泡的直线
        var LineGeo = new THREE.Geometry()
        var p1 = new THREE.Vector3(-250, 280, 0)
        var p2 = new THREE.Vector3(250, 280, 0)
        // 两个顶点坐标添加到LineGeo(geometry)对象
        LineGeo.vertices.push(p1, p2);
        var LineMaterial = new THREE.LineBasicMaterial({
            color: 0xf6200e
        })
        var line = new THREE.Line(LineGeo, LineMaterial)
        scene.add(line)

        /**
          * 精灵创建风扇
        */
        var geometryFS = new THREE.PlaneGeometry(100, 100); //矩形平面
        // 加载草地纹理贴图
        var textureFS = new THREE.TextureLoader().load("/images/fengshan.png");
        // 设置纹理的重复模式
        textureFS.wrapS = THREE.RepeatWrapping;
        textureFS.wrapT = THREE.RepeatWrapping;
        // uv两个方向纹理重复数量
        textureFS.repeat.set(1, 1);
        var materialFS = new THREE.MeshLambertMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 1,
            map: textureFS,
            side: THREE.DoubleSide
        });
        var meshFS = new THREE.Mesh(geometryFS, materialFS); //网格模对象Mesh
        meshFS.rotateY(Math.PI / 2);
        meshFS.position.y = 180
        meshFS.position.x = -250
        scene.add(meshFS); //网格模型添加到场景中
        /**
           * 精灵创建浇水效果
       */
        // 加载雨滴理贴图
        var textureRain = new THREE.TextureLoader().load("/images/rain.png");
        // 创建一个组表示所有的雨滴
        var groupRain = new THREE.Group();
        // 批量创建表示雨滴的精灵模型
        for (let i = 0; i < 400; i++) {
            var spriteMaterialRain = new THREE.SpriteMaterial({
                map: textureRain,//设置精灵纹理贴图
            });
            // 创建精灵模型对象
            var spriteRain = new THREE.Sprite(spriteMaterialRain);
            /*  scene.add(sprite1); */
            // 控制精灵大小, 
            // spriteRain.scale.set(8, 10, 1); //// 只需要设置x、y两个分量就可以
            // 一开始设置为0 ,点击浇水再放大
            spriteRain.scale.set(0, 0, 1)
            let k1 = Math.random() - 0.5;
            let k2 = Math.random() - 0.5;
            let k3 = Math.random() - 0.5;
            // 设置精灵模型位置，在整个空间上上随机分布
            spriteRain.position.set(400 * k1, 200 * Math.random(), 400 * k2)
            groupRain.add(spriteRain);
        }
        scene.add(groupRain)

        /* 
            *环境光创建:环境光颜色RGB成分分别和物体材质颜色RGB成分分别相乘 
        */
        var ambient = new THREE.AmbientLight(0xffffff);
        scene.add(ambient);//环境光对象添加到scene场景中

        /**
            * 相机设置
        */
        var width = window.innerWidth; //窗口宽度
        var height = window.innerHeight; //窗口高度
        /**透视投影相机对象*/
        var camera = new THREE.PerspectiveCamera(60, width / height, 1, 1000);
        camera.position.set(292, 109, 268);//设置相机位置
        camera.lookAt(scene.position); //设置相机方向(指向的场景对象)
        /**
             * 创建渲染器对象
        */
        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(width, height);//设置渲染区域尺寸
        renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色
        window.innerArch.appendChild(renderer.domElement); //archOuter元素中插入canvas对象
        function render() {
            // 每次渲染遍历雨滴群组，刷新频率30~60FPS，两帧时间间隔16.67ms~33.33ms
            // 每次渲染都会更新雨滴的位置，进而产生动画效果
            /* 浇水动画 */
            if (water) { // 如果watering状态为true
                groupRain.children.forEach(sprite => {
                    // 雨滴的y坐标每次减1
                    sprite.position.y -= Math.random() * 3;
                    if (sprite.position.y < 0) {
                        // 如果雨滴落到地面，重置y，从新下落
                        sprite.position.y = 200;
                    }
                });
            }
            /* 风扇动画 */
            if (temperatureDown) {
                meshFS.rotateZ(0.1)
            }
            /* 施肥动画 */ // 采用浇水模块
            if (fertilize) {
                groupRain.children.forEach(sprite => {
                    // 雨滴的y坐标每次减1
                    sprite.position.y -= Math.random() * 3;
                    if (sprite.position.y < 0) {
                        // 如果雨滴落到地面，重置y，从新下落
                        sprite.position.y = 200;
                    }
                });
            }
            //执行渲染操作   指定场景、相机作为参数
            renderer.render(scene, camera);
            // mesh.rotateY(0.1)  // 每次旋转0.01弧度
            requestAnimationFrame(render) // 请求再次执行render函数
        }
        render()
        /* 
            * 使用模型拖拽对象，实现大小旋转
        */
        var controls = new THREE.OrbitControls(camera, renderer.domElement);//创建控件对象

        /* 
            *各种控制动作
        */
        // 浇水
        function watering() {
            water = !water;
            if (water) { // 如果watering状态为true
                groupRain.children.forEach(sprite => {
                    sprite.scale.set(8, 10, 1)
                });
            } else {
                groupRain.children.forEach(sprite => {
                    sprite.scale.set(0, 0, 1)
                });
            }
        }
        // 升温
        function temperatureUping() {
            temperatureUp = !temperatureUp
        }
        // 降温
        function temperatureDowning() {
            temperatureDown = !temperatureDown
        }
        // 施肥
        function fertilizing() {
            fertilize = !fertilize
            if (fertilize) { // 如果watering状态为true
                groupRain.children.forEach(sprite => {
                    sprite.scale.set(8, 10, 1)
                });
            } else {
                groupRain.children.forEach(sprite => {
                    sprite.scale.set(0, 0, 1)
                });
            }
        }
        // 开关灯
        function light() {
            lightOn = !lightOn;
            /* 开灯状态控制 */
            if (lightOn) {  // 默认lightOn为false 即灯关
                // 当lightOn为true时
                groupDp.children.forEach(sprite => {
                    sprite.scale.set(0, 0, 1) // 灯关组隐藏
                })
                groupDpOn.children.forEach(sprite => {
                    sprite.scale.set(25, 25, 1);   // 灯开组显示
                })
            } else {
                groupDp.children.forEach(sprite => {
                    sprite.scale.set(25, 25, 1); // 灯关组显示
                })
                groupDpOn.children.forEach(sprite => {
                    sprite.scale.set(0, 0, 1);   // 灯开组隐藏
                })
            }
        }

        // 返回外围的大棚
        function returnArchOut() {
            window.currenHouseId = ''
            window.currenType = ''
            scene.remove(groupCrop)
            temperatureUp = false,
            temperatureDown = false,
            water = false,
            fertilize = false,
            lightOn = false;
            groupRain.children.forEach(sprite => {
                sprite.scale.set(0, 0, 1)
            });
            groupDp.children.forEach(sprite => {
                sprite.scale.set(25, 25, 1); // 灯关组显示
            })
            groupDpOn.children.forEach(sprite => {
                sprite.scale.set(0, 0, 1);   // 灯开组隐藏
            })
            window.innerArch.style.display = 'none';
            window.outerArch.style.display = 'block'
        }



        // 开启webSocket

        const ws = new wsRequest(`ws://192.168.2.108:3000/dataOrigin?dataSender:archId`)
        
        ws.onmessage((res) => {
             let result = JSON.parse(res.data)
             // 浇水操作
             if (result.controlName == 'watering') {
                if (result.watering) {
                    watering()
                }
                if (!result.watering) {
                    watering()
                }
             }
             //通风降温操作
             if (result.controlName == 'temperatureDown') {
                 if (result.temperatureDown) {
                     temperatureDowning()
                 }
                 if (!result.temperatureDown) {
                    temperatureDowning()
                 }
             }
             // 施肥操作
             if (result.controlName == 'fertilize') {
                 if (result.fertilize) {
                     fertilizing()
                 }
                 if(!result.fertilize){
                     fertilizing()
                 }
             }
             // 开灯操作
             if (result.controlName == 'lightOn') {
                 if (result.lightOn) {
                     light()
                 }
                 if (!result.lightOn) {
                     light()
                 }
             }
        })

        // 构造数据
        let patt = /([01]\d|2[0-3]):[0-5]\d:[0-5]\d/g // 匹配时分秒 18:00:00
        let archData = {}
       // 通过定时器一直生成不同的数据
        var DataConstructor = setInterval(() => {
             for (let index = 0; index < archHouse.length; index++) {
                // console.log(archHouse[index].houseId)
                // console.log(archHouse[index])
                let time = new Date().toString()
                let timeRes = time.match(patt)
                archData[archHouse[index].houseId] = {
                    realTimeData: {
                        temperature: {
                            temperatureTime: timeRes[0],
                            temperatureData: archHouse[index].temperature.suitable
                        },
                        humidity: {
                            humidityTime: timeRes[0],
                            humidityData: archHouse[index].humidity.suitable
                        },
                        light: {
                            lightTime: timeRes[0],
                            lightData: archHouse[index].light.suitable
                        }
                    }
                }
                archData.to = 'archId'
            }

            // 通过webSocket发送数据
            if (currenHouseId) {
                 ws.send(JSON.stringify(archData))
            }
        }, 10000);

        // console.log(archData)
        // setInterval(() => {
        //     if (currenHouseId) {
        //         ws.send(JSON.stringify(archData))
        //     }
        // }, 5000);
    </script>
</body>

</html>